{"version":3,"sources":["sounds/kick-electro01.mp3","sounds/snare-808.mp3","sounds/hihat-808.mp3","components/beat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Beat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","console","log","beatId","setState","selected","state","currentBeat","thisSound","Audio","soundfile","keyBeat","volume","play","react_default","a","createElement","className","Component","App","preloadAudio","soundfiles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","s","value","audio","addEventListener","src","err","return","updateBeat","beatDivisions","startMachine","stopMachine","myTimer","setInterval","bpmDelay","clearInterval","Math","floor","kickdrum","snaredrum","hihat","bpm","beatsHolder","beatsHolder2","beatsHolder3","i","myKey","push","beat","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22608464.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kick-electro01.dce87dcc.mp3\";","module.exports = __webpack_public_path__ + \"static/media/snare-808.24c0c783.mp3\";","module.exports = __webpack_public_path__ + \"static/media/hihat-808.9da5978c.mp3\";","import React, {Component} from 'react';\n\nclass Beat extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: false\n        };\n    }\n\n    onClick = () => {\n        console.log('Toggling beat ' + this.props.beatId);\n        this.setState({\n            selected: !this.state.selected\n        });\n    };\n\n    render() {\n        if (this.state.selected && this.props.currentBeat) {\n            let thisSound = new Audio(this.props.soundfile);\n            if (!this.props.keyBeat){\n                thisSound.volume = 0.7;\n            } else {\n                thisSound.volume = 1;\n            }\n            thisSound.play();\n        }\n        return (\n            <div\n                className={'beat inline '\n                + (this.state.selected ? 'selected-beat' : '') + ' '\n                + (this.props.currentBeat ? 'current-beat' : '')}\n                onClick={this.onClick}>\n            </div>\n        )\n    }\n}\n\nexport default Beat;\n","import React, { Component } from 'react';\nimport Beat from './components/beat';\nimport './App.scss';\nimport kickdrum from './sounds/kick-electro01.mp3';\nimport snaredrum from './sounds/snare-808.mp3';\nimport hihat from './sounds/hihat-808.mp3';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const bpm = 110;\n    const bpmDelay = Math.floor(60000 / bpm / 4);\n    let myTimer;\n\n    this.preloadAudio([kickdrum, snaredrum, hihat]);\n\n    this.state = {\n      bpm,\n      bpmDelay,\n      beatDivisions: 16,\n      currentBeat: 0\n    };\n  }\n\n  preloadAudio = (soundfiles) => {\n    for (const s of soundfiles) {\n      let audio = new Audio();\n      audio.addEventListener('canplaythrough', console.log('audio loaded'), false);\n      audio.src = s;\n    }\n  };\n\n  updateBeat = () => {\n    // console.log('beat ' + this.state.currentBeat);\n\n    if (this.state.currentBeat === this.state.beatDivisions){\n      this.setState({currentBeat: 0});\n    }\n    this.setState({ currentBeat: this.state.currentBeat + 1});\n  };\n\n  startMachine = () => {\n    this.stopMachine();\n    this.setState({currentBeat: 1});\n    this.myTimer = setInterval(this.updateBeat, this.state.bpmDelay);\n  };\n\n  stopMachine = () => {\n    this.setState({currentBeat: 0});\n    clearInterval(this.myTimer);\n  };\n\n  render() {\n    let beatsHolder = [];\n    let beatsHolder2 = [];\n    let beatsHolder3 = [];\n    for(let i=1; i<=this.state.beatDivisions; i++) {\n      const myKey = 'beat' + i;\n      const currentBeat = (this.state.currentBeat === i);\n      const keyBeat = ((i+3) % 4 === 0);\n      beatsHolder.push(\n        (<Beat key={myKey} beatId={i} currentBeat={currentBeat} soundfile={kickdrum} keyBeat={keyBeat} />)\n      );\n        beatsHolder2.push(\n            (<Beat key={myKey} beatId={i} currentBeat={currentBeat} soundfile={snaredrum} keyBeat={keyBeat} />)\n        );\n        beatsHolder3.push(\n            (<Beat key={myKey} beatId={i} currentBeat={currentBeat} soundfile={hihat} keyBeat={keyBeat} />)\n        );\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-body\">\n          <div className=\"beat-grid\">\n            <span className=\"row-label\">Hat</span>{beatsHolder3}\n          </div>\n          <div className=\"beat-grid\">\n            <span className=\"row-label\">Snare</span>{beatsHolder2}\n          </div>\n          <div className=\"beat-grid\">\n            <span className=\"row-label\">Kick</span>{beatsHolder}\n          </div>\n          <div className=\"controls\">\n          <button onClick={this.startMachine}>Start</button>\n          <button onClick={this.stopMachine}>Stop</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}